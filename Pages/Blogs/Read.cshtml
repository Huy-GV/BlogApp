@page
@model BlogApp.Pages.Blogs.ReadModel
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Read Blog";
    ViewData["CSSLink"] = "/css/blogs/readblog.css";
    ViewData["Shared"] = "/css/shared.css";
    ViewData["Script"] = "/js/blog.js";
    ApplicationUser user = await UserManager.GetUserAsync(User);
    var isBanned = (bool)ViewData["IsSuspended"];

    // todo: pass a viewmodel containing what a user is allowed to do
}

<main class="blog-container">
    <article class="blog">
        <div class="blog-info-container">
            <span class="blog-author">@Model.DetailedBlogDto.AuthorName,</span>
            <span class="blog-info"> @Model.DetailedBlogDto.Date.ToString("dd MMMM yyyy")</span>
        </div>

        <p class="title">@Model.DetailedBlogDto.Title</p>
        <hr>
        <div class="comment-option-container">
            @if (user != null)
            {
                var userRoles = await UserManager.GetRolesAsync(user);
                if ((user.UserName == Model.DetailedBlogDto.AuthorName))
                {
                    <form asp-page-handler="DeleteBlog" 
                    asp-route-blogID="@Model.DetailedBlogDto.Id" 
                    method="post">
                        <input class="delete-post" type="submit" value="Delete">
                    </form>
                } 
                if (user.UserName == Model.DetailedBlogDto.AuthorName) 
                {
                    <a class="edit-post"
                        asp-page="/Blogs/Edit" 
                        asp-route-username="@user.UserName"
                        asp-route-blogID="@Model.DetailedBlogDto.Id">Edit</a>
                }
                if (userRoles.Contains(Roles.ModeratorRole)
                    && Model.DetailedBlogDto.AuthorName != "admin"
                    && user.UserName != Model.DetailedBlogDto.AuthorName
                    && !Model.DetailedBlogDto.IsHidden)
                {
                    <form asp-page-handler="HideBlog"
                          asp-route-blogID="@Model.DetailedBlogDto.Id"
                          method="post">
                        <button class="delete-comment">Hide</button>
                    </form>
                }
                
            }

        </div>
        @{
            string blogContentClass = "";
            if (Model.DetailedBlogDto.IsHidden) 
            {
                blogContentClass = "suspended-post";
            }
        }
        <p class="blog-description">@Model.DetailedBlogDto.Introduction</p>
        <img src="/images/@Model.DetailedBlogDto.CoverImageUri">
        <p class="blog-content @blogContentClass">@Model.DetailedBlogDto.Content</p>
    </article>
</main>


<section class="author-info">
    <div class="profile-header">
        <img src="@Model.DetailedBlogDto.AuthorProfileImageUri">
        <span>@Model.DetailedBlogDto.AuthorName</span>
    </div>

    <p>@Model.DetailedBlogDto.Introduction</p>
</section>

@if (!isBanned && User.Identity.IsAuthenticated) 
{
    <form method="post" class="comment-form" asp-page-handler="CreateComment">
        <input asp-for="DetailedBlogDto.Id" value="@Model.DetailedBlogDto.Id" type="hidden" />
        <p>
            <textarea rows="5" cols="50"
                      asp-for="CreateCommentViewModel.Content"
                      placeholder="Add a comment" required></textarea>
        </p>
        <input type="submit" value="POST" class="submit-comment" />
    </form>
}

<section class="comment-section">
    <div class="comment-container">
    <p><strong>Comments</strong></p>
    @foreach (var comment in Model.DetailedBlogDto.CommentDtos)
    {
        <article class="comment" data-id="@comment.Id">
            @{
                string authorClass = comment.AuthorName == Model.DetailedBlogDto.AuthorName
                    ? "blog-author"
                    : "comment-author";
                
                <div class="author-container">
                    <img src="/ProfileImage/@comment.AuthorProfileImageUri">
                    <span class="@authorClass">@comment.AuthorName</span>
                </div>
            }

            <div class="comment-option-container">
                @if (user != null)
                {
                    var userRoles = await UserManager.GetRolesAsync(user);
                    if (comment.AuthorName == user.UserName)
                    {
                        <form asp-page-handler="DeleteComment"
                              asp-route-commentID="@comment.Id"
                              method="post">
                            <button class="delete-comment">Delete</button>
                        </form>
                    }
                    
                    if (userRoles.Contains(Roles.ModeratorRole)
                        && comment.AuthorName != "admin"
                        && user.UserName != comment.AuthorName
                        && !comment.IsHidden)
                    {
                        <form asp-page-handler="HideComment"
                              asp-route-commentID="@comment.Id"
                              method="post">
                            <button class="delete-comment">Hide</button>
                        </form>
                    }
                    if (comment.AuthorName == user.UserName)
                    {
                        
                        <form asp-page-handler="EditComment"
                              asp-route-commentID="@comment.Id"
                              data-id="@comment.Id"
                              method="post"
                              class="edit-comment-form">
                            <textarea rows="5" cols="50"
                                name="EditCommentVM.Content" 
                                class="edit-comment-textarea hidden-element"
                                required>@comment.Content</textarea>
                            <button class="edit-comment" 
                                    data-id="@comment.Id" 
                                    type="button">Edit</button>
                            <input type="submit" value="Save" class="save-btn hidden-element" />
                        </form>
                    }
                }
            </div>
            @{
                string postClass = comment.IsHidden 
                    ? "suspended-post"
                    : string.Empty;
            }
            <p class="comment-text @postClass">@comment.Content</p>
        </article>
    }

    </div>

</section>

