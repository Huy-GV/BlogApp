@page
@model BlogApp.Pages.Blogs.ReadModel
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Read Blog";
    ViewData["CSSLink"] = "/css/blogs/readblog.css";
    ViewData["Shared"] = "/css/shared.css";
    ViewData["Script"] = "/js/blog.js";
    ApplicationUser user = await UserManager.GetUserAsync(User);
    var isSuspended = (bool)ViewData["IsSuspended"];
    var authorProfile = (SimpleProfileDTO) ViewData["AuthorProfile"];
}

<main class="blog-container">
    <article class="blog">
        <div class="blog-info-container">
            <span class="blog-author">@Model.Blog.Author,</span>
            <span class="blog-info"> @Model.Blog.Date.ToString("dd MMMM yyyy")</span>
        </div>

        <p class="title">@Model.Blog.Title</p>
        <hr>
        <div class="comment-option-container">
            @if (user != null)
            {
                var userRoles = await UserManager.GetRolesAsync(user);
                if ((user.UserName == Model.Blog.Author))
                {
                    <form asp-page-handler="DeleteBlog" 
                    asp-route-blogID="@Model.Blog.ID" 
                    method="post">
                        <input class="delete-post" type="submit" value="Delete">
                    </form>
                } 
                if (user.UserName == Model.Blog.Author) 
                {
                    <a class="edit-post"
                        asp-page="/Blogs/Edit" 
                        asp-route-username="@user.UserName"
                        asp-route-blogID="@Model.Blog.ID">Edit</a>
                }
                if (userRoles.Contains(Roles.ModeratorRole)
                    && Model.Blog.Author != "admin"
                    && user.UserName != Model.Blog.Author
                    && !Model.Blog.IsHidden)
                {
                    <form asp-page-handler="HideBlog"
                          asp-route-blogID="@Model.Blog.ID"
                          method="post">
                        <button class="delete-comment">Hide</button>
                    </form>
                }
                
            }

        </div>
        @{
            string blogContentClass = "";
            string blogContent = Model.Blog.Content;
            if (Model.Blog.IsHidden) 
            {
                blogContentClass = "suspended-post";
                blogContent = Model.Blog.SuspensionExplanation;
            }
        }
        <p class="blog-description">@Model.Blog.Description</p>
        <img src="/images/blogs/@Model.Blog.ImagePath">
        <p class="blog-content @blogContentClass">@blogContent</p>


    </article>
</main>


@{
    var author = await UserManager.FindByNameAsync(Model.Blog.Author);

}
<section class="author-info">
    <div class="profile-header">
        <img src="/images/profiles/@authorProfile.ProfilePath">
        <span>@authorProfile.Username</span>
    </div>

    <p>@authorProfile.Description adasdasdas asdas ads asdas dasd sda adasdasdas asdas ads asdas dasd sdas adasdasdas asdas ads asdas dasd sdass</p>
</section>

@if (!isSuspended && User.Identity.IsAuthenticated) 
{
    <form method="post" class="comment-form" asp-page-handler="CreateComment">
        <input asp-for="CreateCommentVM.BlogID" value="@Model.Blog.ID" type="hidden" />
        <p>
            <textarea rows="5" cols="50"
                      asp-for="CreateCommentVM.Content"
                      placeholder="Add a comment" required></textarea>
        </p>
        <input type="submit" value="POST" class="submit-comment" />
    </form>
}

<section class="comment-container">
    <p><strong>Comments</strong></p>
    @foreach (var comment in Model.Blog.Comments)
    {
        <article class="comment" data-id="@comment.ID">
            @{
                string authorClass;
                if (comment.Author == Model.Blog.Author)
                {
                    authorClass = "blog-author";
                }
                else
                {
                    authorClass = "comment-author";
                }

                
                <div class="author-container">
                    <img src="">
                    <span class="@authorClass">@comment.Author</span>
                </div>
            }

            <div class="comment-option-container">
                @if (user != null)
                {
                    var userRoles = await UserManager.GetRolesAsync(user);
                    if (comment.Author == user.UserName)
                    {
                        <form asp-page-handler="DeleteComment"
                              asp-route-commentID="@comment.ID"
                              method="post">
                            <button class="delete-comment">Delete</button>
                        </form>
                    }
                    
                    if (userRoles.Contains(Roles.ModeratorRole)
                        && comment.Author != "admin"
                        && user.UserName != comment.Author
                        && !comment.IsHidden)
                    {
                        <form asp-page-handler="HideComment"
                              asp-route-commentID="@comment.ID"
                              method="post">
                            <button class="delete-comment">Hide</button>
                        </form>
                    }
                    if (comment.Author == user.UserName)
                    {
                        
                        <form asp-page-handler="EditComment"
                              asp-route-commentID="@comment.ID"
                              data-id="@comment.ID"
                              method="post"
                              class="edit-comment-form">
                            <textarea rows="5" cols="50"
                                name="EditComment.Content" 
                                class="edit-comment-textarea hidden-element"
                                required>@comment.Content</textarea>
                            <button class="edit-comment" 
                                    data-id="@comment.ID" 
                                    type="button">Edit</button>
                            <input type="submit" value="Save" class="save-btn hidden-element" />
                        </form>
                    }
                }
            </div>
            @{
                string postClass = "";
                string commentContent = comment.Content;
                if (comment.IsHidden)
                {
                    postClass = "suspended-post";
                    commentContent = comment.SuspensionExplanation;
                }
            }
            <p class="comment-text @postClass">@commentContent</p>
        </article>
    }

</section>

