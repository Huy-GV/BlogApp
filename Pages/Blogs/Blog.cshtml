@page
@model BlogApp.Pages.Blogs.BlogModel
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["CSSLink"] = "/css/blog.css";
    ViewData["Shared"] = "/css/shared.css";
    ViewData["Script"] = "/js/blog.js";
    IdentityUser user = (await UserManager.GetUserAsync(User));
    var isSuspended = (bool)ViewData["IsSuspended"];
}

<a asp-page="./Index" class="menu-button">Back to menu</a>
<div class="blog-container">
    <div class="blog">
        <span class="title">@Model.Blog.Title</span>
        <div class="comment-button-container">
            @if (user != null)
            {
                var userRoles = await UserManager.GetRolesAsync(user);
                if ((user.UserName == Model.Blog.Author) || userRoles.Contains(Roles.AdminRole))
                {
                    <form asp-page-handler="DeleteBlog" asp-route-blogID="@Model.Blog.ID" method="get">
                        <button class="delete-post">Delete</button>
                    </form>
                }
                if (userRoles.Contains(Roles.ModeratorRole)
                    && user.UserName != Model.Blog.Author
                    && !Model.Blog.IsHidden)
                {
                    <form asp-page-handler="HideBlog"
                          asp-route-blogID="@Model.Blog.ID"
                          method="post">
                        <button class="delete-comment">Hide</button>
                    </form>
                }
                if (user.UserName == Model.Blog.Author)
                {
                    <span><button class="edit-post">Edit</button></span>
                    <form asp-page-handler="EditBlog"
                          asp-route-blogID="@Model.Blog.ID"
                          method="post"
                          class="hidden-element edit-blog-form">
                        <input asp-for="EditBlogForm.Content" value="@Model.Blog.Content" />
                        <input type="submit" value="Save" class="save-btn" />
                    </form>
                }
            }

        </div>
        @{
            string blogContentClass = "";
            string blogContent = Model.Blog.Content;
            if (Model.Blog.IsHidden) 
            {
                blogContentClass = "suspended-post";
                blogContent = Model.Blog.SuspensionExplanation;
            }
        }
        <p class="blog-content @blogContentClass">@blogContent</p>
        <div class="blog-info-container">
            <span class='blog-info'>@Model.Blog.Date.ToString("dd-MM-yyyy")</span>
            <span class="blog-info blog-author">@Model.Blog.Author</span>
        </div>

    </div>
</div>



@if (!isSuspended)
{
    <form method="post" class="comment-form">
        <input asp-for="InputComment.BlogID" value="@Model.Blog.ID" type="hidden" />
        <p>
            <textarea rows="5" cols="50"
                      asp-for="InputComment.Content"
                      placeholder="Add your comment" required></textarea>
        </p>
        <input type="submit" value="Post" class="submit-comment" />
    </form>
}

@{
    string visibleShadowClass = "";
    if (Model.Blog.Comments.Count > 0) 
    {
        visibleShadowClass = "visible-shadow";
    }
}

<div class="comment-container @visibleShadowClass">
    @foreach (var comment in Model.Blog.Comments)
    {
        <div class="comment" data-id="@comment.ID">
            @{
                string authorClass;
                if (comment.Author == Model.Blog.Author)
                {
                    authorClass = "blog-author";
                }
                else
                {
                    authorClass = "comment-author";
                }
                <span class="@authorClass">@comment.Author</span>
            }

            <div class="comment-button-container">
                @if (user != null)
                {
                    var userRoles = await UserManager.GetRolesAsync(user);
                    if (comment.Author == user.UserName || userRoles.Contains(Roles.AdminRole))
                    {
                        <form asp-page-handler="DeleteComment"
                              asp-route-commentID="@comment.ID"
                              method="post">
                            <button class="delete-comment">Delete</button>
                        </form>
                    }
                    if (userRoles.Contains(Roles.ModeratorRole)
                        && user.UserName != comment.Author
                        && !comment.IsHidden)
                    {
                        <form asp-page-handler="HideComment"
                              asp-route-commentID="@comment.ID"
                              method="post">
                            <button class="delete-comment">Hide</button>
                        </form>
                    }
                    if (comment.Author == user.UserName)
                    {
                        <button class="edit-comment" data-id="@comment.ID">Edit</button>
                        <form asp-page-handler="EditComment"
                              asp-route-commentID="@comment.ID"
                              data-id="@comment.ID"
                              method="post"
                              class="hidden-element edit-comment-form">
                            <input asp-for="EditComment.Content" value="@comment.Content" />
                            <input type="submit" value="Save" class="save-btn" />
                        </form>
                    }
                }
            </div>
            @{
                string postClass = "";
                string commentContent = comment.Content;
                if (comment.IsHidden)
                {
                    postClass = "suspended-post";
                    commentContent = comment.SuspensionExplanation;
                }
            }
            <p class="comment-text @postClass">@commentContent</p>
        </div>
    }

</div>

