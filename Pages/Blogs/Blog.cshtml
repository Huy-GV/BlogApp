@page
@model BlogApp.Pages.Blogs.BlogModel
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager

@{
    ViewData["CSSLink"] = "/css/blog.css";
    ViewData["Shared"] = "/css/shared.css";
    ViewData["Script"] = "/js/blog.js";
    IdentityUser user = null;
}

    @if (SignInManager.IsSignedIn(User))
    {
        user = (await UserManager.GetUserAsync(User));
        
        <nav>
            <span>@user.UserName</span>
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/", new { area = "" })" method="post">
            <button class="log-btn">Log out</button>
            </form>
        </nav>
    }
    else {
        <nav>
            <span><button class="log-btn" asp-area="Identity" asp-page="/Account/Login">Log in</button></span>
            <span><button class="log-btn" asp-area="Identity" asp-page="/Account/Register">Register</button></span>
        </nav> 
    }


<a asp-page="./Index" class="menu-button">Back to menu</a>
<div class="blog-container">
    <div class="blog">
        <span class="title">@Model.Blog.Title</span>
        <span class="date">@Model.Blog.Date.ToString("ddd/ MM/ yyyy")</span>
        <span class='author'>@Model.Blog.Author</span>
        <!-- wrap a form around this -->

        @{
            if (user != null && user.UserName == Model.Blog.Author)
            {
                <form asp-page-handler="DeleteBlog" asp-route-blogID="@Model.Blog.ID" method="post">
                    <button class="delete-post">Delete</button>
                </form>
                <span><button class="edit-post">Edit</button></span>
                <form asp-page-handler="EditBlog" 
                      asp-route-blogID="@Model.Blog.ID" 
                      method="post" 
                      class="hidden-element edit-blog-form">
                    <input asp-for="EditForm.Content" value="@Model.Blog.Content" />
                    <input type="submit" value="Save" class="save-btn"/>
                </form>
            }
        }

        <p class="blog-content">@Model.Blog.Content</p>
    </div>
</div>

<div class="add-comment-button-container"><a class="comment-button">Add a comment</a></div>

<form method="post" class="comment-form hidden-element">
    <input asp-for="InputComment.BlogID" value="@Model.Blog.ID" type="hidden" />
    <input asp-for="InputComment.Content" placeholder="Type your comment">
    <button class="cancel-comment" type="button">Cancel</button>
    <input type="submit" value="Post" class="submit-comment"/>
</form>

<div class="comment-container">
    @foreach (var comment in Model.Blog.Comments)
    {
    <div class="comment" data-id= "@comment.ID">
        <span class="comment-author">@comment.Author</span>
        @{
                if (user != null && comment.Author == user.UserName)
                {
                <div class="comment-button-container">
                    <button class="edit-comment" data-id="@comment.ID">Edit</button>
                    <form asp-page-handler="EditComment"
                          asp-route-commentID="@comment.ID"
                          data-id="@comment.ID"
                          method="post"
                          class="hidden-element edit-comment-form">
                        <input asp-for="EditComment.Content" value="@comment.Content" />
                        <input type="submit" value="Save" class="save-btn" />
                    </form>

                    <form asp-page-handler="DeleteComment"
                          asp-route-commentID="@comment.ID"
                          method="post">
                        <button class="delete-comment">Delete</button>
                    </form>
                </div>

                }
        }

        <p class="comment-text">@comment.Content</p>
    </div>
    }

</div>

