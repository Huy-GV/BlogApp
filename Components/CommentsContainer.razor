@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using RazorBlog.Data
@using RazorBlog.Models
@using RazorBlog.Services

@inject AuthenticationStateProvider _authenticationStateProvider
@inject UserManager<ApplicationUser> _userManager
@inject RazorBlogDbContext _dbContext
@inject ILogger<CommentsContainer> _logger
@inject IUserModerationService _userModerationService

<section class="comment-section">
    <div class="comment-container">
        <p>
            <strong>Comments</strong>
        </p>
        @foreach (var comment in CommentDtos)
        {
            <article class="comment" data-id="@comment.Id">
                @{
                    var authorClass = comment.AuthorName == BlogAuthorName
                    ? "blog-author"
                    : "comment-author";

                    <div class="author-container">
                        <img alt="Commenter's Profile Image" src="~/images/@comment.AuthorProfileImageUri" asp-append-version="true">
                        <span class="@authorClass">@comment.AuthorName</span>
                        @{
                            if (comment.IsModified)
                            {
                                <span> Updated @comment.LastUpdateTime.ToShortDateString()</span>
                            }
                            else
                            {
                                <span> On @comment.CreationTime.ToShortDateString()</span>
                            }
                        }
                    </div>
                }

                <div class="comment-option-container">
                    @{
                        var isUserCommentAuthor = comment.AuthorName == CurrentUser.UserName;
                        if (isUserCommentAuthor)
                        {
                            <form asp-page-handler="DeleteComment"
                                  asp-route-commentID="@comment.Id"
                                  method="post">
                                <button class="delete-comment">Delete</button>
                            </form>
                        }

                        if (CurrentUser.AllowedToHideBlogOrComment && !comment.IsHidden)
                        {
                            <form asp-page-handler="HideComment"
                                  asp-route-commentID="@comment.Id"
                                  method="post">
                                <button class="delete-comment">Hide</button>
                            </form>
                        }

                        if (isUserCommentAuthor)
                        {
                            <form asp-page-handler="EditComment"
                                  asp-route-commentId="@comment.Id"
                                  data-id="@comment.Id"
                                  method="post" #1#
                                  class="edit-comment-form">
                                <textarea rows="5" cols="50" required
                                          name="EditCommentViewModel.Content"
                                          class="edit-comment-textarea hidden-element">@comment.Content</textarea>
                                <input asp-for="EditCommentViewModel.BlogId" value="@BlogId" type="hidden" />
                                <button class="edit-comment" data-id="@comment.Id" type="button">Edit</button>
                                <input type="submit" value="Save" class="save-btn hidden-element" />
                            </form>
                        }
                    }
                </div>
                @{
                    var postClass = comment.IsHidden
                    ? "suspended-post"
                    : string.Empty;
                }
                <p class="comment-text @postClass">@comment.Content</p>
            </article>
        }

    </div>

</section>